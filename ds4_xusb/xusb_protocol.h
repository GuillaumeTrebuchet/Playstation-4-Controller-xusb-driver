#pragma once

#include <ntddk.h>
#include <wdf.h>

// {EC87F1E3-C13B-4100-B5F7-8B84D54260CB}
DEFINE_GUID(XUSB_INTERFACE_CLASS_GUID,
	0xEC87F1E3, 0xC13B, 0x4100, 0xB5, 0xF7, 0x8B, 0x84, 0xD5, 0x42, 0x60, 0xCB);


#define FILE_DEVICE_XUSB (0x8000)
#define IOCTL_XINPUT_GET_INFORMATION			CTL_CODE(FILE_DEVICE_XUSB, 0x800, METHOD_BUFFERED, FILE_READ_ACCESS)
#define IOCTL_XINPUT_GET_GAMEPAD_STATE			CTL_CODE(FILE_DEVICE_XUSB, 0x803, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_XINPUT_SET_GAMEPAD_STATE			CTL_CODE(FILE_DEVICE_XUSB, 0x804, METHOD_BUFFERED, FILE_WRITE_ACCESS)
//#define IOCTL_XINPUT_ACQUIRE_TID				CTL_CODE(FILE_DEVICE_XUSB, 0x801, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
//#define IOCTL_XINPUT_RELEASE_TID				CTL_CODE(FILE_DEVICE_XUSB, 0x802, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_XINPUT_GET_CAPABILITIES			CTL_CODE(FILE_DEVICE_XUSB, 0x801, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_XINPUT_GET_BATTERY_INFORMATION	CTL_CODE(FILE_DEVICE_XUSB, 0x806, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_XINPUT_GET_LED_STATE				CTL_CODE(FILE_DEVICE_XUSB, 0x802, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)


#define XINPUT_GAMEPAD_DPAD_UP          0x0001
#define XINPUT_GAMEPAD_DPAD_DOWN        0x0002
#define XINPUT_GAMEPAD_DPAD_LEFT        0x0004
#define XINPUT_GAMEPAD_DPAD_RIGHT       0x0008
#define XINPUT_GAMEPAD_START            0x0010
#define XINPUT_GAMEPAD_BACK             0x0020
#define XINPUT_GAMEPAD_LEFT_THUMB       0x0040
#define XINPUT_GAMEPAD_RIGHT_THUMB      0x0080
#define XINPUT_GAMEPAD_LEFT_SHOULDER    0x0100
#define XINPUT_GAMEPAD_RIGHT_SHOULDER   0x0200
#define XINPUT_GAMEPAD_A                0x1000
#define XINPUT_GAMEPAD_B                0x2000
#define XINPUT_GAMEPAD_X                0x4000
#define XINPUT_GAMEPAD_Y                0x8000

#define XINPUT_COMMAND_LED				0x01
#define XINPUT_COMMAND_VIBRATION		0x02

#define XINPUT_DEVTYPE_GAMEPAD			0x01

#define XINPUT_DEVSUBTYPE_UNKNOWN           0x00
#define XINPUT_DEVSUBTYPE_GAMEPAD           0x01
#define XINPUT_DEVSUBTYPE_WHEEL             0x02
#define XINPUT_DEVSUBTYPE_ARCADE_STICK      0x03
#define XINPUT_DEVSUBTYPE_FLIGHT_STICK      0x04
#define XINPUT_DEVSUBTYPE_DANCE_PAD         0x05
#define XINPUT_DEVSUBTYPE_GUITAR            0x06
#define XINPUT_DEVSUBTYPE_GUITAR_ALTERNATE  0x07
#define XINPUT_DEVSUBTYPE_DRUM_KIT          0x08
#define XINPUT_DEVSUBTYPE_GUITAR_BASS       0x0B
#define XINPUT_DEVSUBTYPE_ARCADE_PAD        0x13

#define XINPUT_CAPS_FFB_SUPPORTED       0x0001
#define XINPUT_CAPS_WIRELESS            0x0002
#define XINPUT_CAPS_VOICE_SUPPORTED     0x0004
#define XINPUT_CAPS_PMD_SUPPORTED       0x0008
#define XINPUT_CAPS_NO_NAVIGATION       0x0010

//
// Devices that support batteries
//
#define BATTERY_DEVTYPE_GAMEPAD         0x00
#define BATTERY_DEVTYPE_HEADSET         0x01

//
// Flags for battery status level
//
#define BATTERY_TYPE_DISCONNECTED       0x00    // This device is not connected
#define BATTERY_TYPE_WIRED              0x01    // Wired device, no battery
#define BATTERY_TYPE_ALKALINE           0x02    // Alkaline battery source
#define BATTERY_TYPE_NIMH               0x03    // Nickel Metal Hydride battery source
#define BATTERY_TYPE_UNKNOWN            0xFF    // Cannot determine the battery type

// These are only valid for wireless, connected devices, with known battery types
// The amount of use time remaining depends on the type of device.
#define BATTERY_LEVEL_EMPTY             0x00
#define BATTERY_LEVEL_LOW               0x01
#define BATTERY_LEVEL_MEDIUM            0x02
#define BATTERY_LEVEL_FULL              0x03


#define XINPUT_LED_OFF					0x00
#define XINPUT_LED_BLINK				0x01
#define XINPUT_LED_1_SWITCH_BLINK		0x02
#define XINPUT_LED_2_SWITCH_BLINK		0x03
#define XINPUT_LED_3_SWITCH_BLINK		0x04
#define XINPUT_LED_4_SWITCH_BLINK		0x05
#define XINPUT_LED_1					0x06
#define XINPUT_LED_2					0x07
#define XINPUT_LED_3					0x08
#define XINPUT_LED_4					0x09
#define XINPUT_LED_CYCLE				0x0A
#define XINPUT_LED_FAST_BLINK			0x0B
#define XINPUT_LED_SLOW_BLINK			0x0C
#define XINPUT_LED_FLIPFLOP				0x0D
#define XINPUT_LED_ALLBLINK				0x0E
#define XINPUT_PORT_TO_LED_MAP			0x06
#define XINPUT_LED_TO_PORT_MAP			0xFF


#define XINPUT_VERSION_9_1_0			0x0100
#define XINPUT_VERSION_1_3				0x0102


/*
Specific DS4 IO control codes
*/

#define IOCTL_DS4_GET_LED_COLOR				CTL_CODE(FILE_DEVICE_XUSB, 0xC00, METHOD_BUFFERED, FILE_READ_ACCESS)
#define IOCTL_DS4_SET_LED_COLOR				CTL_CODE(FILE_DEVICE_XUSB, 0xC01, METHOD_BUFFERED, FILE_WRITE_ACCESS)
#define IOCTL_DS4_GET_BATTERY_STATE			CTL_CODE(FILE_DEVICE_XUSB, 0xC02, METHOD_BUFFERED, FILE_READ_ACCESS)
#define IOCTL_DS4_GET_SENSOR_STATE			CTL_CODE(FILE_DEVICE_XUSB, 0xC03, METHOD_BUFFERED, FILE_READ_ACCESS)

DEFINE_DEVPROPKEY(DS4_XUSB_DEVPROP_LEDCOLOR, 0xa29c0b4f, 0x6d9d, 0x4778, 0x92, 0x27, 0xbc, 0xb1, 0x3b, 0x59, 0x10, 0x32, 2);	//	pid must be >= 2

#pragma pack(push, 1)

typedef struct _DS4_GET_BATTERY_STATE_BUFFER
{
	UCHAR batteryLevel;
} DS4_GET_BATTERY_STATE_BUFFER, *PDS4_GET_BATTERY_STATE_BUFFER;

typedef struct _DS4_GET_SENSOR_STATE_BUFFER
{
	USHORT accelX;
	USHORT accelY;
	USHORT accelZ;
	USHORT roll;
	USHORT yaw;
	USHORT pitch;
} DS4_GET_SENSOR_STATE_BUFFER, *PDS4_GET_SENSOR_STATE_BUFFER;

typedef struct _DS4_GET_LED_COLOR_BUFFER
{
	UCHAR R;
	UCHAR G;
	UCHAR B;
} DS4_GET_LED_COLOR_BUFFER, *PDS4_GET_LED_COLOR_BUFFER;

typedef struct _DS4_SET_LED_COLOR_BUFFER
{
	UCHAR R;
	UCHAR G;
	UCHAR B;
} DS4_SET_LED_COLOR_BUFFER, *PDS4_SET_LED_COLOR_BUFFER;


typedef struct _XINPUT_GET_LED_STATE_BUFFER
{
	USHORT	Version;
	UCHAR	LedState;
} XINPUT_GET_LED_STATE_BUFFER, *PXINPUT_GET_LED_STATE_BUFFER;

typedef struct _XINPUT_GET_BATTERY_INFORMATION_IN_BUFFER
{
	USHORT	Version;
	UCHAR	DeviceNumber;
	UCHAR	DeviceType;
} XINPUT_GET_BATTERY_INFORMATION_IN_BUFFER, *PXINPUT_GET_BATTERY_INFORMATION_IN_BUFFER;

/*
Input buffer length is 4, last byte is some kind of
*/
typedef struct _XINPUT_GET_BATTERY_INFORMATION_OUT_BUFFER
{
	USHORT	Version;
	UCHAR	BatteryType;
	UCHAR	BatteryLevel;

} XINPUT_GET_BATTERY_INFORMATION_OUT_BUFFER, *PXINPUT_GET_BATTERY_INFORMATION_OUT_BUFFER;

typedef struct _XINPUT_DEVICE_ID_V_0100
{
	UCHAR	deviceNumber;
} XINPUT_DEVICE_ID_V_0100, *PXINPUT_DEVICE_ID_V_0100;

typedef struct _XINPUT_DEVICE_ID
{
	USHORT	Version;
	UCHAR	deviceNumber;
} XINPUT_DEVICE_ID, *PXINPUT_DEVICE_ID;

typedef struct _XINPUT_GET_GAMEPAD_STATE_BUFFER_V_0100 //	sizeof = 20
{
	UCHAR	Success;
	UCHAR	unknown;
	UCHAR	unknown3;
	UCHAR	unknown4;
	ULONG	PacketNumber;
	USHORT	wButtons;
	UCHAR	LeftTrigger;
	UCHAR	RightTrigger;
	SHORT	ThumbLX;
	SHORT	ThumbLY;
	SHORT	ThumbRX;
	SHORT	ThumbRY;
} XINPUT_GET_GAMEPAD_STATE_BUFFER_V_0100, *PXINPUT_GET_GAMEPAD_STATE_BUFFER_V_0100;

typedef struct _XINPUT_GET_GAMEPAD_STATE_BUFFER
{
	USHORT	Version;
	UCHAR	Success;
	UCHAR	unknown2;
	UCHAR	unknown3;
	ULONG	PacketNumber;
	UCHAR	unknown4;
	UCHAR	unknown5;
	USHORT	wButtons;
	UCHAR	LeftTrigger;
	UCHAR	RightTrigger;
	SHORT	ThumbLX;
	SHORT	ThumbLY;
	SHORT	ThumbRX;
	SHORT	ThumbRY;
	UCHAR	unknown6;
	UCHAR	unknown7;
	UCHAR	unknown8;
	UCHAR	unknown9;
	UCHAR	unknown10;
	UCHAR	unknown11;
} XINPUT_GET_GAMEPAD_STATE_BUFFER, *PXINPUT_GET_GAMEPAD_STATE_BUFFER;


typedef struct _XINPUT_SET_GAMEPAD_STATE_BUFFER
{
	UCHAR	DeviceNumber;
	UCHAR	LedState;
	UCHAR	LeftMotorSpeed;
	UCHAR	RightMotorSpeed;
	UCHAR	CommandType;
} XINPUT_SET_GAMEPAD_STATE_BUFFER, *PXINPUT_SET_GAMEPAD_STATE_BUFFER;

typedef struct _XINPUT_GET_INFORMATION_BUFFER
{
	USHORT	Version;	//	XINPUT_VERSION_XXX
	USHORT	deviceCount;		
	UINT32	unknown4;	//	must not be (& 0x80) = TRUE
	UCHAR	unknown8;
	UCHAR	unknown9;
	UCHAR	unknown10;
	UCHAR	unknown11;
} XINPUT_GET_INFORMATION_BUFFER, *PXINPUT_GET_INFORMATION_BUFFER;

/*
Represent capabilities supported by the device. Check XInputGetCapabilities on msdn
*/
typedef struct _XINPUT_GET_CAPABILITIES_BUFFER
{
	USHORT Version;
	UCHAR Type;
	UCHAR SubType;
	USHORT wButtons;	//	&= 0xF7FF
	UCHAR bLeftTrigger;
	UCHAR bRightTrigger;
	USHORT sThumbLX;
	USHORT sThumbLY;
	USHORT sThumbRX;
	USHORT sThumbRY;
	UCHAR unknown16;
	UCHAR unknown17;
	UCHAR unknown18;
	UCHAR unknown19;
	UCHAR unknown20;
	UCHAR unknown21;
	UCHAR wLeftMotorSpeed;
	UCHAR wRightMotorSpeed;
} XINPUT_GET_CAPABILITIES_BUFFER, *PXINPUT_GET_CAPABILITIES_BUFFER;

#pragma pack(pop)